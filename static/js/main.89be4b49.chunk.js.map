{"version":3,"sources":["utils/ariana.js","App.js","reportWebVitals.js","index.js"],"names":["getRandom","min","max","Math","floor","random","updateInsanities","ariana","quelani","sing","draw","kills","console","log","getArianaInsanity","getQuelaniInsanity","App","useState","days","setDays","setAriana","setQuelani","arianaActivity","setArianaActivity","quelaniKills","setQuelaniKills","className","name","onSubmit","e","preventDefault","tmpAriana","tmpQuelani","submitHandler","onClick","type","id","value","htmlFor","children","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89be4b49.chunk.js","sourcesContent":["\nfunction getRandom(min, max) {\n    const num = Math.floor(Math.random() * (max+1-min) + min)\n    return num;\n}\n\n\nfunction getArianaInsanity(ariana, sing=false, draw=false){\n    if(draw){\n        const dice = getRandom(1, 10);\n        return dice < ariana ? 1 : ariana + 1\n    } else if(sing){\n        return ariana + 3\n    } else {\n        return ariana + 1\n    }\n}\n\nfunction getQuelaniInsanity(quelani, kills, sing){\n\n    switch(kills){\n        case \"0\":\n            console.log(\"QUELANI\", quelani)\n            quelani += 1;\n            break;\n        case \"1\": \n            quelani += 1;\n            break;\n        case \"2\":\n            quelani += getRandom(1,2);\n            break;\n        default:\n            quelani += getRandom(1, 3);\n    }\n\n    return quelani - (sing ? 4 : 0) \n}\n\nfunction updateInsanities(ariana, quelani, sing, draw, kills){\n    console.log(`ARIANA: ${ariana}, SING: ${sing}, DRAW: ${draw}, KILLS: ${kills}`)\n    ariana = getArianaInsanity(ariana, sing, draw);\n    quelani = getQuelaniInsanity(quelani, kills, sing);\n    quelani = quelani <= 0 ? 1 : quelani;\n    ariana = ariana <= 0 ? 1 : ariana;\n\n    return [ariana, quelani]\n}\n\nexport default updateInsanities;","\nimport './App.css';\nimport updateInsanities from './utils/ariana' \nimport React, { useState } from 'react'\n\n\nfunction App() {\n\n  const [days, setDays] = useState(0)\n  const [ariana, setAriana] = useState(1);\n  const [quelani, setQuelani] = useState(1)\n  const [arianaActivity, setArianaActivity] = useState(\"none\");\n  const [quelaniKills, setQuelaniKills] = useState(\"0\");\n\n  function submitHandler(e){\n      e.preventDefault();\n      const sing = arianaActivity === \"sing\" ? true : false;\n      const draw = arianaActivity === \"draw\" ? true : false;\n      const [tmpAriana, tmpQuelani] = updateInsanities(ariana, quelani, sing, draw, quelaniKills);\n      setAriana(tmpAriana);\n      setQuelani(tmpQuelani);\n      setDays(days + 1);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div>\n          ARIANA: {ariana}\n        </div>\n        <div>\n          QUELANI: {quelani}\n        </div>\n        <div>\n          DAYS CALCULATED: {days}\n        </div>\n        <form name=\"insanityForm\" onSubmit={(e) => submitHandler(e)}>\n          <div>\n              <label>What does Ariana do on day {days}?</label>\n              <div className={\"input_container\"}>\n                  <input onClick = {() => setArianaActivity(\"sing\")}\n                      type=\"radio\"\n                      name={`ariana`}\n                      key={`r_sing-`}\n                      id={`r_sing-`}\n                      value=\"sing\"/>\n                  <label htmlFor={`r_sing-`} children=\"sing\"/>\n              </div>\n              <div className={\"input_container\"}>\n                  <input onClick = {() => setArianaActivity(\"draw\")}\n                      type=\"radio\"\n                      name={`ariana`}\n                      key={`r_draw-`}\n                      id={`r_draw-`}\n                      value=\"draw\"/>\n                  <label htmlFor={`r_draw-`} children=\"draw\"/>\n              </div>\n              <div className={\"input_container\"}>\n                  <input onClick = {() => setArianaActivity(\"none\")}\n                      type=\"radio\"\n                      name={`ariana`}\n                      key={`r_none-`}\n                      id={`r_none-`}\n                      value=\"none\"/>\n                  <label htmlFor={`r_none-`} children=\"none\"/>\n              </div>\n\n              <label>How many killing blows does Quelani land on day {days}?</label>\n              <div className={\"input_container\"}>\n                  <input onClick = {() => setQuelaniKills(\"0\")} \n                      type=\"radio\"\n                      name={`quelani`}\n                      key={`r_no-kills-`}\n                      id={`r_no-kills-`}\n                      value=\"0-1\"/>\n                  <label htmlFor={`r_no-kills-`} children=\"0-1\"/>\n              </div>\n              <div className={\"input_container\"}>\n                  <input onClick = {() => setQuelaniKills(\"2\")}\n                      type=\"radio\"\n                      name={`quelani`}\n                      key={`r_two-kills-`}\n                      id={`r_two-kills-`}\n                      value=\"2\"/>\n                  <label htmlFor={`r_two-kills-`} children=\"2\"/>\n              </div>\n              <div className={\"input_container\"}>\n                  <input onClick = {() => setQuelaniKills(\"3\")}\n                      type=\"radio\"\n                      name={`quelani`}\n                      key={`r_three-kills-`}\n                      id={`r_three-kills-`}\n                      value=\"3+\"/>\n                  <label htmlFor={`r_three-kills-`} children=\"3+\"/>\n              </div>\n          </div>\n          <input type=\"submit\"/>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}